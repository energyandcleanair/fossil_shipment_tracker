# Share the base version across the multiple layers
FROM python:3.10-slim-bookworm as base

# Install dependencies, best practice to do this separately so that
# we decrease the attack surface of the image.
FROM base as dependencies

WORKDIR /app/engine-deps/

# Setup installation dependencies
RUN apt-get update
RUN apt-get install -y \
  build-essential \
  libpq-dev
RUN pip install poetry

# Install dependencies
COPY engine/poetry.lock engine/pyproject.toml ./
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV PYTHONUNBUFFERED=1

COPY base /app/base

RUN poetry install --no-dev

# Build the app
FROM base as app

# Install runtime dependencies.
# We use chromium rather than chrome as both the browser and
# driver are in the package manager and are both compatible.
RUN apt-get update
RUN apt-get install -y \
  libpq-dev \
  chromium \
  chromium-driver

WORKDIR /app/engine/
# Best practice is to create a user so we aren't running as root
# which can modify files in the image at runtime but we need to
# give it permissions to write to the cache dir.
RUN adduser engine  --disabled-password  --disabled-login

COPY --from=dependencies /app/engine-deps/.venv /.venv

# Setup env
ENV PATH=/.venv/bin/:${PATH}
ENV PYTHONPATH=${PYTHONPATH}:${PWD}
ENV PYTHONUNBUFFERED=1
ENV TQDM_DISABLE=1

# Bring in source
COPY engine/ .
# Assets and cache can be writen to the engine
COPY --chown=engine engine/assets ./assets
COPY --chown=engine api/assets/kpler ./assets/kpler

RUN mkdir -p cache/kpler cache/datalastic cache/marinetraffic && \
  chown -R engine:engine cache

RUN mkdir -p outputs/ && \
  chown -R engine:engine outputs

# Lower the user permissions so it can't overwrite the code.
USER engine

# Set the entry point to the pipenv python so we can just
# define the run that we want to do (for example,
# run/update_company.)
ENTRYPOINT ["python"]
